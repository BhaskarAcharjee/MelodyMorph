------------------- Project Folder Structure -----------------

MelodyMorph/
├── app.py
├── static/
│   ├── css/
│   │   └── styles.css
│   ├── js/
│   |   ├── main.js
│   |   ├── bundle.js
│   |   └── audioVisualizer.js
|   └── uploads/
│       ├── images/
│       │   └── image.jpg
│       └── audios/
│           └── audio.wav
├── templates/
│   └── index.html
├── node_modules/
│   └── (dependencies and modules installed by npm)
├── package.json
├── package-lock.json
├── Dockerfile
├── .dockerignore
├── .gitignore
└── README.md

app.py: This file contains the main Flask application code that defines the routes and handles requests from clients.
static/: This folder contains static files such as CSS and JavaScript used by the web application.
css/: This subfolder contains the styles.css file, which provides styling for the HTML elements of the web application.
js/: This subfolder contains the main.js file, which includes client-side JavaScript logic for the web application.
bundle.js: This file is the bundled JavaScript file generated by the Browserify tool. It includes all the required JavaScript code from different files, making it easier to manage and load on the client-side.
audioVisualizer.js: This file contains separate JavaScript functions responsible for audio visualization in the web application.
templates/: This folder contains the HTML template files used for rendering the web pages.
index.html: This file represents the main page of the web application and is the template used to display the user interface.
uploads/: This folder is used to store files uploaded by users.
images/: This subfolder is used to store image files uploaded by users. In this case, it includes the image.jpg file.
audios/: This subfolder is used to store audio files uploaded by users. In this case, it includes the audio.wav file.
node_modules/: This folder contains the dependencies and modules installed by npm (Node Package Manager). You should not manually upload this folder to version control, as it can be generated automatically by running "npm install" based on the dependencies listed in the package.json file.
package.json: This file contains information about the project, its name, version, and dependencies. It also includes scripts for bundling and watching JavaScript files using npm.
package-lock.json: This file is automatically generated by npm and is used to lock the versions of the dependencies installed. It ensures consistent installations across different environments.
Dockerfile: This file is used to build the Docker image for the web application. It specifies the necessary configurations and dependencies required to run the application inside a Docker container.
.dockerignore: This file specifies the files and folders that should be excluded when building the Docker image. It helps reduce the size of the Docker image by avoiding unnecessary files.
.gitignore: This file tells Git which files and folders to ignore when committing and pushing changes to the version control repository. It typically includes items like node_modules/ to prevent them from being added to the repository.
README.md: This file is a Markdown file that contains documentation and instructions about the project. It provides information about how to set up and run the application and other relevant details.

------------------- Audio Information -----------------

Sample Rate:
Sample rate refers to the number of samples of audio captured per second, typically measured in Hertz (Hz). It represents the precision or quality of the audio recording. A higher sample rate captures more details and provides a more accurate representation of the original sound. Common sample rates include 44.1 kHz (CD quality) and 48 kHz (standard for digital video and audio production).

Bit Rate:
Bit rate refers to the number of bits processed or transmitted per unit of time, typically measured in kilobits per second (kbps) or megabits per second (Mbps). In the context of audio, it represents the amount of data used to encode one second of audio. A higher bit rate generally indicates better audio quality, as more data is allocated to represent the audio signal accurately. It is commonly associated with compressed audio formats like MP3, AAC, or OGG. Bit rate can vary depending on the encoding settings and desired trade-offs between audio quality and file size. Higher bit rates result in larger file sizes.

------------------- Visualization Modes -----------------

1. Waveform: Displays the amplitude of the audio signal over time as a continuous waveform.
2. Spectrogram: Represents the audio frequency spectrum over time using a color-coded intensity plot.
3. Frequency Bars: Visualizes audio frequency bands as vertical bars with varying heights.
4. Circular Visualization: Audio-reactive shapes distributed around the center forming a circle.
5. Time-Frequency Heatmap: Shows the audio spectrum with color-coded cells based on amplitude and frequency.
6. Audio Reactive Shapes: Various shapes and sizes change with the music's amplitude and frequency.
7. Fractals: Displays self-replicating geometric patterns that change in response to audio data.
8. Spectrum Waterfall: A cascading visualization of the audio spectrum over time.
9. Particle System: Animated particles moving or emitting based on audio data.
10. Frequency Rings: Divides the canvas into rings, each representing a different frequency range.
11. 3D Visualization: Three-dimensional shapes that rotate and change with the music.
12. Kaleidoscope: Mirrored shapes and patterns that change with the music.
13. Glitch Art: Visual distortions and glitches triggered by audio events.
14. Motion Trails: Visualizes motion paths of audio-reactive objects over time.
15. VU Meter: Classic volume unit meter that shows audio level intensity.
16. Neon Glow: Vibrant neon colors and glows that pulse with the music.
17. Geometric Patterns: Audio-reactive geometric shapes arranged in intricate patterns.
18. Audio Fireworks: Firework-like particles that burst on audio events.
19. Spectrum Flowers: Flowers that bloom and change colors based on audio frequencies.
20. Pixelation: Pixels that change color and size according to audio data.
21. Audio Tornado: Audio-reactive tornado-like spirals moving across the canvas.
22. Audio Rain: Raindrops that fall and splash based on audio intensity.
23. Audio Metronome: Metronome-like visuals pulsing to the beat of the music.
24. Audio Jellyfish: Jellyfish-like creatures floating and pulsating with audio.
25. Fractal Tree: Recursive tree-like patterns synced with audio.
26. Audio Galaxy: Mesmerizing galaxy visualization with audio sync.

--------------------- Docker Command ----------------------

docker build -t melody-morph .
docker run -d -p 8000:5000 melody-morph
docker system prune

--------------------- NPM Command ----------------------

npm run bundle
npm run watch